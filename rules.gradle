afterEvaluate {
    def buildFile = getBuildFile()
    if (!buildFile.exists()) {
        return
    }
    def dependenciesRuleFile = 'dependencies.gradle'
    def dependenciesTag = 'dependencies'
    def regular1 = /([\da-z-\.]+:){2}\d(\.\d){0,2}/
    def regular2 = /group:.*,.*name:.*,.*version:.*\d+(\.\d)*/
    def startTag = '{'
    def endTag = '}'
    def stack = new Stack<>()
    def start = false
    def lineNo = 0
    buildFile.withReader {
        def lines = it.readLines()
        for (line in lines) {
            lineNo++
            line = line.trim()
            if (line.isEmpty()) {
                continue
            }
            if (line.startsWith(dependenciesTag)) {
                start = true
                stack.push(startTag)
                continue
            }
            if (start) {
                if (line.contains(startTag)) {
                    stack.push(startTag)
                }
                if (line.contains(endTag)) {
                    stack.pop()
                }
                if (stack.isEmpty()) {
                    break
                }
                def matcher1 = line =~ regular1
                def matcher2 = line =~ regular2
                if (matcher1.find() || matcher2.find()) {
                    throw new GradleException("build.gradle dependencies check error, You must define it in ${dependenciesRuleFile} file. \r\n at line ${lineNo}: ${line} \r\n File path: ${buildFile.absolutePath}")
                }
            }
        }
    }
}

afterEvaluate {
    def libModule = 'libs'
    if (project.name == libModule) {
        return
    }
    android.sourceSets.main.jniLibs.srcDirs.each { dirFile ->
        if (dirFile != null && dirFile.exists() && dirFile.list().size() > 0) {
            throw new GradleException("The external lib file must be defined under the ${libModule} module.\r\nplease check the folder path: ${dirFile.absolutePath} and move all of them to ${libModule} module.")
        }
    }
}

afterEvaluate {
    if (!CHECK_PACKAGE_NAME.toBoolean()) {
        println 'skip check package name. '
        return
    }
    def skipLib = []
    def name = project.name
    if (name in skipLib) {
        return
    }
    def srcDirs = android.sourceSets.main.java.srcDirs
    def srcFile = new File(srcDirs[0].path)
    if (!srcFile.exists() || srcFile.list().size() == 0) {
        return
    }
    def moduleRule = 'com.ryan.gradle'
    def com = 'com'
    def ryan = 'ryan'
    def gradle = 'gradle'
    def comFile = new File(srcFile.absolutePath + File.separator + com)
    def ryanFile = new File(comFile.absolutePath + File.separator + ryan)
    def errorMsg = "The module package name must be named ${moduleRule}. \r\n see path: ${srcFile.absolutePath}"
    if (comFile.exists()) {
        def comList = comFile.list()
        if (comList.size() == 0) {
            return
        }
        if (comList[0] != ryan || comList.size() >= 2) {
            throw new GradleException(errorMsg)
        }
    }
    if (ryanFile.exists()) {
        def ryanList = ryanFile.list()
        if (ryanList.size() == 0) {
            return
        }
        if (ryanList[0] != gradle || ryanList.size() >= 2) {
            throw new GradleException(errorMsg)
        }
    }
    def gradleDir = ryanFile.path + File.separator + gradle
    def gradleFile = new File(gradleDir)
    if (!gradleFile.exists()) {
        throw new GradleException(errorMsg)
    }
    File manifestFile = android.sourceSets.main.manifest.srcFile
    if (!manifestFile.exists()) {
        return
    }
    XmlParser parser = new XmlParser()
    def node = parser.parse(manifestFile)
    String packageName = node.attribute('package')
    if (!packageName.startsWith(moduleRule)) {
        throw new GradleException("The package name in AndroidManifest must start with ${moduleRule}. \r\n see file path: ${manifestFile.absolutePath}")
    }
}

afterEvaluate {
    def projectPrefix = ''
    def projectName = project.name
    if (!projectName.startsWith(projectPrefix)) {
        return
    }
    def resourceSets = android.sourceSets
    if (resourceSets != null) {
        resourceSets.main.res.srcDirs.each {
            def file = file(it)
            if (file.exists() && file.isDirectory()) {
                scanFiles(file)
            }
        }
    }
}

static void scanFiles(File file) {
    if (!file.exists()) {
        return
    }
    if (file.isDirectory()) {
        file.list().each {
            def dirPath = file.path + File.separator + it
            def dirFile = new File(dirPath)
            if (dirFile.exists() && dirFile.isDirectory()) {
                dirFile.list().each { resName ->
                    def projectName = project.name
                    if (!resName.startsWith(projectName)) {
                        throw new GradleException("The resource name: ${resName} is not standardized, please follow the naming convention. \r\n at file path: ${dirPath + File.separator + resName}")
                    }
                }
            }
        }
    }
}